"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./header.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("../../../../../src/app/header/header.component");
var styles_HeaderComponent = [i0.styles];
exports.RenderType_HeaderComponent = i1.ɵcrt({ encapsulation: 0,
    styles: styles_HeaderComponent, data: {} });
function View_HeaderComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, null, null, 4, 'p', [], null, null, null, null, null)), (_l()(),
            i1.ɵted(null, ['\nHeader\n'])), (_l()(), i1.ɵeld(0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('click' === en)) {
                var pd_0 = (_co.login() !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), (_l()(), i1.ɵted(null, ['Login'])), (_l()(),
            i1.ɵted(null, ['\n\n']))], null, null);
}
exports.View_HeaderComponent_0 = View_HeaderComponent_0;
function View_HeaderComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, null, null, 1, 'app-header', [], null, null, null, View_HeaderComponent_0, exports.RenderType_HeaderComponent)),
        i1.ɵdid(114688, null, 0, i2.HeaderComponent, [], null, null)], function (_ck, _v) {
        _ck(_v, 1, 0);
    }, null);
}
exports.View_HeaderComponent_Host_0 = View_HeaderComponent_Host_0;
exports.HeaderComponentNgFactory = i1.ɵccf('app-header', i2.HeaderComponent, View_HeaderComponent_Host_0, {}, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21hYy9Eb2N1bWVudHMvd2ViYXBwL3NyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQubmdmYWN0b3J5LnRzIiwidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmc6Ly8vVXNlcnMvbWFjL0RvY3VtZW50cy93ZWJhcHAvc3JjL2FwcC9oZWFkZXIvaGVhZGVyLmNvbXBvbmVudC50cyIsIm5nOi8vL1VzZXJzL21hYy9Eb2N1bWVudHMvd2ViYXBwL3NyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuaHRtbCIsIm5nOi8vL1VzZXJzL21hYy9Eb2N1bWVudHMvd2ViYXBwL3NyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQudHMuSGVhZGVyQ29tcG9uZW50X0hvc3QuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyIgIiwiPHA+XG5IZWFkZXJcbjxidXR0b24gKGNsaWNrKT1cImxvZ2luKClcIj5Mb2dpbjwvYnV0dG9uPlxuXG48L3A+IiwiPGFwcC1oZWFkZXI+PC9hcHAtaGVhZGVyPiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztvQkNBQTtNQUFBLHdFQUFHO2FBQUEsZ0NBRUg7TUFBQTtRQUFBO1FBQUE7UUFBUTtVQUFBO1VBQUE7UUFBQTtRQUFSO01BQUEsZ0NBQTBCLDBDQUFjO2FBQUE7OztvQkNGeEM7TUFBQTthQUFBO1VBQUE7SUFBQTs7OzsifQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL21hYy9Eb2N1bWVudHMvd2ViYXBwL2Rpc3QvbmdmYWN0b3J5L3NyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQubmdmYWN0b3J5LnRzIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL0RvY3VtZW50cy93ZWJhcHAvZGlzdC9uZ2ZhY3Rvcnkvc3JjL2FwcC9oZWFkZXIvaGVhZGVyLmNvbXBvbmVudC5uZ2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7QUFDRixvQkFBb0I7O0FBR3JCLHdEQUEwRDtBQUMxRCxrQ0FBb0M7QUFDcEMsbUVBQXFFO0FBQ3JFLElBQU0sc0JBQXNCLEdBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEMsUUFBQSwwQkFBMEIsR0FBb0IsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFDLGFBQWEsRUFBQyxDQUFDO0lBQy9FLE1BQU0sRUFBQyxzQkFBc0IsRUFBQyxJQUFJLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQztBQUM1QyxnQ0FBdUMsRUFBTTtJQUMzQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBQyxDQUFDLEVBQUMsR0FBRyxFQUFFLEVBQVksRUFDOUUsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUMvRSxFQUFFLENBQUMsSUFBSSxDQUFFLElBQVksRUFBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBWSxFQUFFLElBQVksRUFDcEYsQ0FBQyxFQUFDLFFBQVEsRUFBRSxFQUFZLEVBQUUsSUFBWSxFQUFDLENBQUMsQ0FBRSxJQUFZLEVBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxVQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsTUFBTTtZQUM1RSxJQUFJLEVBQUUsR0FBVyxJQUFJLENBQUM7WUFDdEIsSUFBSSxHQUFHLEdBQXNCLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixJQUFNLElBQUksR0FBTyxDQUFPLEdBQUcsQ0FBQyxLQUFLLEVBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztnQkFDaEQsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLENBQUM7WUFDRCxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ1osQ0FBQyxFQUFFLElBQVksRUFBRSxJQUFZLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUFFLElBQVksRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2pGLEVBQUUsQ0FBQyxJQUFJLENBQUUsSUFBWSxFQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBWSxFQUFFLElBQVksQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFkRCx3REFjQztBQUNELHFDQUE0QyxFQUFNO0lBQ2hELE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFDLENBQUMsRUFBQyxZQUFZLEVBQUUsRUFBWSxFQUN2RixJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBQyxzQkFBc0IsRUFBQyxrQ0FBMEIsQ0FBQyxDQUFDO1FBQzdGLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQVksRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFZLEVBQUUsSUFBWSxFQUN4RSxJQUFZLENBQUMsQ0FBQyxFQUFDLFVBQUMsR0FBRyxFQUFDLEVBQUU7UUFDN0IsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDZCxDQUFDLEVBQUUsSUFBWSxDQUFDLENBQUM7QUFDbkIsQ0FBQztBQVBELGtFQU9DO0FBQ1ksUUFBQSx3QkFBd0IsR0FBMkMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQ2hHLEVBQUUsQ0FBQyxlQUFlLEVBQUMsMkJBQTJCLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxFQUFZLENBQUMsQ0FBQztBQUN4RSxrNEJBQWs0QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBBbmd1bGFyIHRlbXBsYXRlIGNvbXBpbGVyLlxuICogRG8gbm90IGVkaXQuXG4gKiBAc3VwcHJlc3Mge3N1c3BpY2lvdXNDb2RlLHVzZWxlc3NDb2RlLG1pc3NpbmdQcm9wZXJ0aWVzLG1pc3NpbmdPdmVycmlkZX1cbiAqL1xuIC8qIHRzbGludDpkaXNhYmxlICovXG5cblxuaW1wb3J0ICogYXMgaTAgZnJvbSAnLi9oZWFkZXIuY29tcG9uZW50LmNzcy5zaGltLm5nc3R5bGUnO1xuaW1wb3J0ICogYXMgaTEgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBpMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50JztcbmNvbnN0IHN0eWxlc19IZWFkZXJDb21wb25lbnQ6YW55W10gPSBbaTAuc3R5bGVzXTtcbmV4cG9ydCBjb25zdCBSZW5kZXJUeXBlX0hlYWRlckNvbXBvbmVudDppMS5SZW5kZXJlclR5cGUyID0gaTEuybVjcnQoe2VuY2Fwc3VsYXRpb246MCxcbiAgICBzdHlsZXM6c3R5bGVzX0hlYWRlckNvbXBvbmVudCxkYXRhOnt9fSk7XG5leHBvcnQgZnVuY3Rpb24gVmlld19IZWFkZXJDb21wb25lbnRfMChfbDphbnkpOmkxLsm1Vmlld0RlZmluaXRpb24ge1xuICByZXR1cm4gaTEuybV2aWQoMCxbKF9sKCkoKSxpMS7JtWVsZCgwLChudWxsIGFzIGFueSksKG51bGwgYXMgYW55KSw0LCdwJywoW10gYXMgYW55W10pLFxuICAgICAgKG51bGwgYXMgYW55KSwobnVsbCBhcyBhbnkpLChudWxsIGFzIGFueSksKG51bGwgYXMgYW55KSwobnVsbCBhcyBhbnkpKSksKF9sKCkoKSxcbiAgICAgIGkxLsm1dGVkKChudWxsIGFzIGFueSksWydcXG5IZWFkZXJcXG4nXSkpLChfbCgpKCksaTEuybVlbGQoMCwobnVsbCBhcyBhbnkpLChudWxsIGFzIGFueSksXG4gICAgICAxLCdidXR0b24nLChbXSBhcyBhbnlbXSksKG51bGwgYXMgYW55KSxbWyhudWxsIGFzIGFueSksJ2NsaWNrJ11dLChfdixlbiwkZXZlbnQpID0+IHtcbiAgICAgICAgdmFyIGFkOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICB2YXIgX2NvOmkyLkhlYWRlckNvbXBvbmVudCA9IF92LmNvbXBvbmVudDtcbiAgICAgICAgaWYgKCgnY2xpY2snID09PSBlbikpIHtcbiAgICAgICAgICBjb25zdCBwZF8wOmFueSA9ICgoPGFueT5fY28ubG9naW4oKSkgIT09IGZhbHNlKTtcbiAgICAgICAgICBhZCA9IChwZF8wICYmIGFkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWQ7XG4gICAgICB9LChudWxsIGFzIGFueSksKG51bGwgYXMgYW55KSkpLChfbCgpKCksaTEuybV0ZWQoKG51bGwgYXMgYW55KSxbJ0xvZ2luJ10pKSwoX2woKSgpLFxuICAgICAgaTEuybV0ZWQoKG51bGwgYXMgYW55KSxbJ1xcblxcbiddKSldLChudWxsIGFzIGFueSksKG51bGwgYXMgYW55KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gVmlld19IZWFkZXJDb21wb25lbnRfSG9zdF8wKF9sOmFueSk6aTEuybVWaWV3RGVmaW5pdGlvbiB7XG4gIHJldHVybiBpMS7JtXZpZCgwLFsoX2woKSgpLGkxLsm1ZWxkKDAsKG51bGwgYXMgYW55KSwobnVsbCBhcyBhbnkpLDEsJ2FwcC1oZWFkZXInLChbXSBhcyBhbnlbXSksXG4gICAgICAobnVsbCBhcyBhbnkpLChudWxsIGFzIGFueSksKG51bGwgYXMgYW55KSxWaWV3X0hlYWRlckNvbXBvbmVudF8wLFJlbmRlclR5cGVfSGVhZGVyQ29tcG9uZW50KSksXG4gICAgICBpMS7JtWRpZCgxMTQ2ODgsKG51bGwgYXMgYW55KSwwLGkyLkhlYWRlckNvbXBvbmVudCwoW10gYXMgYW55W10pLChudWxsIGFzIGFueSksXG4gICAgICAgICAgKG51bGwgYXMgYW55KSldLChfY2ssX3YpID0+IHtcbiAgICBfY2soX3YsMSwwKTtcbiAgfSwobnVsbCBhcyBhbnkpKTtcbn1cbmV4cG9ydCBjb25zdCBIZWFkZXJDb21wb25lbnROZ0ZhY3Rvcnk6aTEuQ29tcG9uZW50RmFjdG9yeTxpMi5IZWFkZXJDb21wb25lbnQ+ID0gaTEuybVjY2YoJ2FwcC1oZWFkZXInLFxuICAgIGkyLkhlYWRlckNvbXBvbmVudCxWaWV3X0hlYWRlckNvbXBvbmVudF9Ib3N0XzAse30se30sKFtdIGFzIGFueVtdKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5Sm1hV3hsSWpvaUwxVnpaWEp6TDIxaFl5OUViMk4xYldWdWRITXZkMlZpWVhCd0wzTnlZeTloY0hBdmFHVmhaR1Z5TDJobFlXUmxjaTVqYjIxd2IyNWxiblF1Ym1kbVlXTjBiM0o1TG5Seklpd2lkbVZ5YzJsdmJpSTZNeXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYm1jNkx5OHZWWE5sY25NdmJXRmpMMFJ2WTNWdFpXNTBjeTkzWldKaGNIQXZjM0pqTDJGd2NDOW9aV0ZrWlhJdmFHVmhaR1Z5TG1OdmJYQnZibVZ1ZEM1MGN5SXNJbTVuT2k4dkwxVnpaWEp6TDIxaFl5OUViMk4xYldWdWRITXZkMlZpWVhCd0wzTnlZeTloY0hBdmFHVmhaR1Z5TDJobFlXUmxjaTVqYjIxd2IyNWxiblF1YUhSdGJDSXNJbTVuT2k4dkwxVnpaWEp6TDIxaFl5OUViMk4xYldWdWRITXZkMlZpWVhCd0wzTnlZeTloY0hBdmFHVmhaR1Z5TDJobFlXUmxjaTVqYjIxd2IyNWxiblF1ZEhNdVNHVmhaR1Z5UTI5dGNHOXVaVzUwWDBodmMzUXVhSFJ0YkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SWdJaXdpUEhBK1hHNUlaV0ZrWlhKY2JqeGlkWFIwYjI0Z0tHTnNhV05yS1QxY0lteHZaMmx1S0NsY0lqNU1iMmRwYmp3dlluVjBkRzl1UGx4dVhHNDhMM0ErSWl3aVBHRndjQzFvWldGa1pYSStQQzloY0hBdGFHVmhaR1Z5UGlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3pzN096czdPenR2UWtOQlFUdE5RVUZCTEhkRlFVRkhPMkZCUVVFc1owTkJSVWc3VFVGQlFUdFJRVUZCTzFGQlFVRTdVVUZCVVR0VlFVRkJPMVZCUVVFN1VVRkJRVHRSUVVGU08wMUJRVUVzWjBOQlFUQkNMREJEUVVGak8yRkJRVUU3T3p0dlFrTkdlRU03VFVGQlFUdGhRVUZCTzFWQlFVRTdTVUZCUVRzN096c2lmUT09XG4iXX0=