"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./app.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("./header/header.component.ngfactory");
var i3 = require("../../../../src/app/header/header.component");
var i4 = require("@angular/router");
var i5 = require("./footer/footer.component.ngfactory");
var i6 = require("../../../../src/app/footer/footer.component");
var i7 = require("../../../../src/app/app.component");
var styles_AppComponent = [i0.styles];
exports.RenderType_AppComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_AppComponent,
    data: {} });
function View_AppComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵted(null, ['\n'])), (_l()(), i1.ɵeld(0, null, null, 1, 'app-header', [], null, null, null, i2.View_HeaderComponent_0, i2.RenderType_HeaderComponent)), i1.ɵdid(114688, null, 0, i3.HeaderComponent, [], null, null), (_l()(), i1.ɵted(null, ['\n'])), (_l()(), i1.ɵeld(16777216, null, null, 1, 'router-outlet', [], null, null, null, null, null)),
        i1.ɵdid(212992, null, 0, i4.RouterOutlet, [i4.ChildrenOutletContexts, i1.ViewContainerRef,
            i1.ComponentFactoryResolver, [8, null], i1.ChangeDetectorRef], null, null), (_l()(), i1.ɵted(null, ['\n'])), (_l()(), i1.ɵted(null, ['\n'])), (_l()(), i1.ɵeld(0, null, null, 1, 'app-footer', [], null, null, null, i5.View_FooterComponent_0, i5.RenderType_FooterComponent)),
        i1.ɵdid(114688, null, 0, i6.FooterComponent, [], null, null), (_l()(), i1.ɵted(null, ['\n']))], function (_ck, _v) {
        _ck(_v, 2, 0);
        _ck(_v, 5, 0);
        _ck(_v, 9, 0);
    }, null);
}
exports.View_AppComponent_0 = View_AppComponent_0;
function View_AppComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, null, null, 1, 'app-root', [], null, null, null, View_AppComponent_0, exports.RenderType_AppComponent)),
        i1.ɵdid(49152, null, 0, i7.AppComponent, [], null, null)], null, null);
}
exports.View_AppComponent_Host_0 = View_AppComponent_Host_0;
exports.AppComponentNgFactory = i1.ɵccf('app-root', i7.AppComponent, View_AppComponent_Host_0, {}, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21hYy9Eb2N1bWVudHMvd2ViYXBwL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5uZ2ZhY3RvcnkudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9Vc2Vycy9tYWMvRG9jdW1lbnRzL3dlYmFwcC9zcmMvYXBwL2FwcC5jb21wb25lbnQudHMiLCJuZzovLy9Vc2Vycy9tYWMvRG9jdW1lbnRzL3dlYmFwcC9zcmMvYXBwL2FwcC5jb21wb25lbnQuaHRtbCIsIm5nOi8vL1VzZXJzL21hYy9Eb2N1bWVudHMvd2ViYXBwL3NyYy9hcHAvYXBwLmNvbXBvbmVudC50cy5BcHBDb21wb25lbnRfSG9zdC5odG1sIl0sInNvdXJjZXNDb250ZW50IjpbIiAiLCI8IS0tVGhlIGNvbnRlbnQgYmVsb3cgaXMgb25seSBhIHBsYWNlaG9sZGVyIGFuZCBjYW4gYmUgcmVwbGFjZWQuLS0+XG48YXBwLWhlYWRlcj48L2FwcC1oZWFkZXI+XG48cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XG48IS0tIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOmNlbnRlclwiPlxuICA8aDE+XG4gICAgV2VsY29tZSB0byB7e3RpdGxlfX0hXG4gIDwvaDE+XG4gIDxpbWcgd2lkdGg9XCIzMDBcIiBzcmM9XCJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQmxibU52WkdsdVp6MGlkWFJtTFRnaVB6NE5DandoTFMwZ1IyVnVaWEpoZEc5eU9pQkJaRzlpWlNCSmJHeDFjM1J5WVhSdmNpQXhPUzR4TGpBc0lGTldSeUJGZUhCdmNuUWdVR3gxWnkxSmJpQXVJRk5XUnlCV1pYSnphVzl1T2lBMkxqQXdJRUoxYVd4a0lEQXBJQ0F0TFQ0TkNqeHpkbWNnZG1WeWMybHZiajBpTVM0eElpQnBaRDBpVEdGNVpYSmZNU0lnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JaUI0Yld4dWN6cDRiR2x1YXowaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1UazVPUzk0YkdsdWF5SWdlRDBpTUhCNElpQjVQU0l3Y0hnaURRb0pJSFpwWlhkQ2IzZzlJakFnTUNBeU5UQWdNalV3SWlCemRIbHNaVDBpWlc1aFlteGxMV0poWTJ0bmNtOTFibVE2Ym1WM0lEQWdNQ0F5TlRBZ01qVXdPeUlnZUcxc09uTndZV05sUFNKd2NtVnpaWEoyWlNJK0RRbzhjM1I1YkdVZ2RIbHdaVDBpZEdWNGRDOWpjM01pUGcwS0NTNXpkREI3Wm1sc2JEb2pSRVF3TURNeE8zME5DZ2t1YzNReGUyWnBiR3c2STBNek1EQXlSanQ5RFFvSkxuTjBNbnRtYVd4c09pTkdSa1pHUmtZN2ZRMEtQQzl6ZEhsc1pUNE5DanhuUGcwS0NUeHdiMng1WjI5dUlHTnNZWE56UFNKemREQWlJSEJ2YVc1MGN6MGlNVEkxTERNd0lERXlOU3d6TUNBeE1qVXNNekFnTXpFdU9TdzJNeTR5SURRMkxqRXNNVGcyTGpNZ01USTFMREl6TUNBeE1qVXNNak13SURFeU5Td3lNekFnTWpBekxqa3NNVGcyTGpNZ01qRTRMakVzTmpNdU1pQUpJaTgrRFFvSlBIQnZiSGxuYjI0Z1kyeGhjM005SW5OME1TSWdjRzlwYm5SelBTSXhNalVzTXpBZ01USTFMRFV5TGpJZ01USTFMRFV5TGpFZ01USTFMREUxTXk0MElERXlOU3d4TlRNdU5DQXhNalVzTWpNd0lERXlOU3d5TXpBZ01qQXpMamtzTVRnMkxqTWdNakU0TGpFc05qTXVNaUF4TWpVc016QWdDU0l2UGcwS0NUeHdZWFJvSUdOc1lYTnpQU0p6ZERJaUlHUTlJazB4TWpVc05USXVNVXcyTmk0NExERTRNaTQyYURCb01qRXVOMmd3YkRFeExqY3RNamt1TW1nME9TNDBiREV4TGpjc01qa3VNbWd3YURJeExqZG9NRXd4TWpVc05USXVNVXd4TWpVc05USXVNVXd4TWpVc05USXVNVXd4TWpVc05USXVNUTBLQ1FsTU1USTFMRFV5TGpGNklFMHhORElzTVRNMUxqUklNVEE0YkRFM0xUUXdMamxNTVRReUxERXpOUzQwZWlJdlBnMEtQQzluUGcwS1BDOXpkbWMrRFFvPVwiPlxuPC9kaXY+XG48aDI+SGVyZSBhcmUgc29tZSBsaW5rcyB0byBoZWxwIHlvdSBzdGFydDogPC9oMj5cbjx1bD5cbiAgPGxpPlxuICAgIDxoMj48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9hbmd1bGFyLmlvL3R1dG9yaWFsXCI+VG91ciBvZiBIZXJvZXM8L2E+PC9oMj5cbiAgPC9saT5cbiAgPGxpPlxuICAgIDxoMj48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvd2lraVwiPkNMSSBEb2N1bWVudGF0aW9uPC9hPjwvaDI+XG4gIDwvbGk+XG4gIDxsaT5cbiAgICA8aDI+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vYmxvZy5hbmd1bGFyLmlvLy9cIj5Bbmd1bGFyIGJsb2c8L2E+PC9oMj5cbiAgPC9saT5cbjwvdWw+IC0tPlxuPGFwcC1mb290ZXI+PC9hcHAtZm9vdGVyPlxuIiwiPGFwcC1yb290PjwvYXBwLXJvb3Q+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JDQW1FLHVDQUNuRTtNQUFBOzZEQUFBLFVBQUE7TUFBQSxnRUFBeUI7TUFBQSxTQUN6QjtNQUFBO2FBQUE7c0NBQUE7VUFBQSxlQUErQix1Q0FrQnRCO1VBQUEsU0FDVDtVQUFBO2FBQUE7VUFBQSxlQUF5QjtJQXBCekI7SUFDQTtJQW1CQTs7OztvQkNyQkE7TUFBQTthQUFBOzs7OyJ9
//# sourceMappingURL=data:application/json;charset=utf-8;base64,